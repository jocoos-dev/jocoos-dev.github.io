[
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/ios/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "Initialize with AppKey and AppSecret  You must initialize a FlipFlop instance before using sdk. call initialize api in didFinishLaunchingWithOptions of AppDelegate.swift  You can get APP_KEY and APP_SECRET from FlipFlop Dashboard\n func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u0026gt; Bool { //Overridepointforcustomizationafterapplicationlaunch. FlipFlop.initialize(appKey: APP_KEY, appSecret: APP_SECRET) return true }    Parameter Description     appKey: String Application Key   appSecret: String Application Secret    Uninitialize  You must uinitialize a FlipFlop instance before app terminate call uninitialize api in applicationWillTerminate of AppDelegate.swift  func applicationWillTerminate(_ application: UIApplication) { //Calledwhentheapplicationisabouttoterminate.Savedataifappropriate.SeealsoapplicationDidEnterBackground:. FlipFlop.uninitialize() } Authorize To get Flipflop instance, you must call authentication\nuserID must be unique\n FlipFlop.authentication(userID: USER_ID, userName: USER_NAME, avatarProfileURL: AVATAR_PROFILE_URL) { (result) in switch result { case .failure(let error): //error case .success(let sdk): //successresultisflipflopinstance } }    Parameter Description     userID: String User ID   userName: String User name   avatarProfileURL: String User Profile URL    "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/ios/",
	"title": "IOS",
	"tags": [],
	"description": "",
	"content": "API Documentation Learn how to integrate Flipflop API\n"
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/ios/user/",
	"title": "User",
	"tags": [],
	"description": "",
	"content": "Update User information To update user information, call updateUserInfo of flipflop instance\nsdk.updateUserInfo(userName: USER_NAME, avatarProfileURL: AVATAR_PROFILE_URL) { (result) in switch result { case .failure(let error): //errorupdate case .success: //successnoresult } }    Parameter Description     userName: String? User name   avatarProfileURL: String? User Profile URL    "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/android/",
	"title": "Android",
	"tags": [],
	"description": "",
	"content": "Chapter Android Coming soon\u0026hellip; "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/ios/video/",
	"title": "Video",
	"tags": [],
	"description": "",
	"content": "Get Video List To get video list,\n Get FFVideoListLoader instance from flipflop instance Call next api if you want more vidoes, just call next api. If there are no more videos, it will return an empty value.  let videoListLoader = sdk.getVideoListLoader() videoListLoader?.next { (videoResult) in switch videoResult { case .failure(let error): //error case .success(let videos): //getvideos } }    Parameter Description     cursor: String Start cursor position   count: Int? Number of query. default: 20 maximum: 100   userID: String? Video Owner ID. default: All user   type: String? Video Type. only available BROADCASTED or UPLOADED. default: All video   state: String? Video State. only available LIVE or VOD. default: All    Update Video To update video, call updateVideo api of flipflop instance\nOnly the owner can update the video.\n sdk.editVideo(videoKey: VIDEO_KEY, title: TITLE, content: CONTENT, visibility: VISIBILITY thumbnail_url: THUMBNAIL_URL, data: DATA) { (result) in switch result { case .failure(let error): //error case .success: //success } }    Parameter Description     videoKey: String Video Key   title: String Video Title   content: String? Video Description   visibility: String? Video public scope. only available \u0026ldquo;PUBLIC\u0026rdquo; or \u0026ldquo;PRIVATE\u0026rdquo;   thumbnail_url: String? Video thumbnail url   data: String? Video custom data    Delete Video To delete video, call deleteVideo api of flipflop instance\nOnly the owner can delete the video.\n sdk.deleteVideo(videoKey: VIDEO_KEY) { (result) in switch result { case .failure(let error): //error case .success: //success } }    Parameter Description     videoKey: String Video Key    Upload Video Upload Video Thumbnail "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": "   Code Message     40000 Invalid user_id - valid value of user_id is range 1 to 80   40001 Invalid video_key -valid value of video_key is range 4 to 100   40002 Invalid type - valid value of type is either BROADCASTED or UPLOADED   40003 Invalid user_name - max size of user_name is range 80   40004 Invalid user_avatar_url - max size of user_avatar_url is 200   40005 Invalid title - valid value of title is range 1 to 100   40006 Invalid content - valid value of content is range 1 to 4000   40007 Invalid visibility - valid value of visibility is either PUBLIC or PRIVATE   40009 Invalid data - valid value of data is range 1 to 2000   40011 Invalid state - valid value of state is either LIVE or VOD   40012 Invalid cursor.   40013 Invalid count - check the limitation of count   40014 Invalid like - valid value of like is true   40015 Invalid keyword - valid value of keyword is range 1 to 200   40016 Invalid sort - valid value of sort is either asc or desc   40017 Invalid reason - valid value of reason is range 1 to 400   40018 Invalid video_key - Already exist   40019 Invalid video_key format - video_key should contain only alphanumeric without space   40020 Required request body is missing   40400 Not found - specified video_key is not exist   40401 Invalid state - the state of specified video_key is not valid   40402 Not permitted - the user_id does not have permission   40403 Already liked   40404 Invalid visibility - specified video_key is private    "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/",
	"title": "Learn API for FlipFlop SDK",
	"tags": [],
	"description": "",
	"content": "FlipFlop SDK Overview FlipFlop is Live Commerce SDK\nEasily integrate live broadcasts with chat and products on your platform.\nMain features  Video Management Live Streaming Live Player VOD Player Chat  "
},
{
	"uri": "https://github.com/jocoos-dev/jocoos-dev.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]